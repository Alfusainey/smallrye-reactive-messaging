package io.smallrye.reactive.messaging.mqtt;

import java.util.NoSuchElementException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

import org.eclipse.microprofile.config.Config;
import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;
import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.smallrye.mutiny.Multi;
import io.smallrye.mutiny.subscription.BackPressureStrategy;
import io.vertx.mqtt.MqttClientOptions;
import io.vertx.mutiny.core.Vertx;
import io.vertx.mutiny.mqtt.MqttClient;

public class MqttSource {

    private static final Logger LOGGER = LoggerFactory.getLogger(MqttSource.class);
    private final PublisherBuilder<MqttMessage<?>> source;
    private AtomicBoolean subscribed = new AtomicBoolean();

    public MqttSource(Vertx vertx, Config config) {
        MqttClientOptions options = new MqttClientOptions();
        options.setClientId(config.getOptionalValue("client-id", String.class).orElse(null));
        options.setAutoGeneratedClientId(config.getOptionalValue("auto-generated-client-id", Boolean.class)
                .orElse(false));
        options.setAutoKeepAlive(config.getOptionalValue("auto-keep-alive", Boolean.class)
                .orElse(true));
        options.setSsl(config.getOptionalValue("ssl", Boolean.class).orElse(false));
        options.setWillQoS(config.getOptionalValue("will-qos", Integer.class).orElse(0));
        options.setKeepAliveTimeSeconds(config.getOptionalValue("keep-alive-seconds", Integer.class)
                .orElse(30));
        options.setMaxInflightQueue(config.getOptionalValue("max-inflight-queue", Integer.class)
                .orElse(10));
        options.setCleanSession(config.getOptionalValue("auto-clean-session", Boolean.class)
                .orElse(true));
        options.setWillFlag(config.getOptionalValue("will-flag", Boolean.class).orElse(false));
        options.setWillRetain(config.getOptionalValue("will-retain", Boolean.class).orElse(false));
        options.setMaxMessageSize(config.getOptionalValue("max-message-size", Integer.class).orElse(-1));
        options.setReconnectAttempts(config.getOptionalValue("reconnect-attempts", Integer.class).orElse(5));
        options.setReconnectInterval(TimeUnit.SECONDS.toMillis(
                config.getOptionalValue("reconnect-interval-seconds", Integer.class).orElse(1)));
        options.setUsername(config.getOptionalValue("username", String.class).orElse(null));
        options.setPassword(config.getOptionalValue("password", String.class).orElse(null));
        options.setConnectTimeout((int) TimeUnit.SECONDS.toMillis(
                config.getOptionalValue("connect-timeout-seconds", Integer.class).orElse(60)));
        options.setTrustAll(config.getOptionalValue("trust-all", Boolean.class).orElse(false));

        String host = config.getOptionalValue("host", String.class).orElseThrow(() -> new NoSuchElementException(
                "Invalid configuration - expected key `host` to be present in " + config.getPropertyNames()));
        int def = options.isSsl() ? 8883 : 1883;
        int port = config.getOptionalValue("port", Integer.class).orElse(def);
        String server = config.getOptionalValue("server-name", String.class).orElse(null);
        String topic = getTopicOrFail(config);
        MqttClient client = MqttClient.create(vertx, options);
        int qos = config.getOptionalValue("qos", Integer.class).orElse(0);
        boolean broadcast = config.getOptionalValue("broadcast", Boolean.class).orElse(false);

        this.source = ReactiveStreams.fromPublisher(
                client.connect(port, host, server)
                        .onItem().produceMulti(a -> Multi.createFrom().<MqttMessage<?>> emitter(emitter -> {
                            client.publishHandler(message -> emitter.emit(new ReceivingMqttMessage(message)));

                            client.subscribe(topic, qos).subscribe().with(
                                    i -> subscribed.set(true),
                                    emitter::fail);

                        }, BackPressureStrategy.BUFFER))
                        .then(multi -> {
                            if (broadcast) {
                                return multi.broadcast().toAllSubscribers();
                            }
                            return multi;
                        })
                        .on().cancellation(() -> {
                            subscribed.set(false);
                            client.disconnectAndForget();
                        })
                        .onFailure().invoke(t -> LOGGER.error("Unable to establish a connection with the MQTT broker", t)));
    }

    PublisherBuilder<MqttMessage<?>> getSource() {
        return source;
    }

    boolean isSubscribed() {
        return subscribed.get();
    }

    private String getTopicOrFail(Config config) {
        return config.getOptionalValue("topic", String.class)
                .orElseGet(
                        () -> config.getOptionalValue("channel-name", String.class)
                                .orElseThrow(() -> new IllegalArgumentException("Topic attribute must be set")));
    }
}
